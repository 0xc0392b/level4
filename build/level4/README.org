#+TITLE:  level4 elixir project
#+AUTHOR: William Santos
#+EMAIL:  w@wsantos.net

#+ID:               level4.elixir-project
#+LANGUAGE:         en
#+STARTUP:          showall
#+EXPORT_FILE_NAME: level4-elixir-project


The aim here is to provide a succinct overview of the biggest moving
parts in level4. For more specific implementation details please see
the readmes in each subdirectory.


** supervision tree topology
Each market feed is its own supervision tree with 4 main components:
exchange, mediator, orderbook, and websocket. These are all genservers.
The root supervisor has a =one_for_rest= strategy because non of its
children should crash. A market supervisor can use a =one_for_rest=
strategy due to the order in which children are started.
#+BEGIN_SRC text
		      root supervisor
			     |
     -------------------------------------------------------------------------------------------
     |          |          |          |              |                    |                    |
  registry   registry   registry   registry   dynamic supervisor   plug http server   ecto repo (postgres)
						     |
						    0..*
						     |
					      market supervisor
						     |
					       ----------------
					       |              |
					    exchange   level2 supervisor
							      |
					           ------------------------
						   |          |           |
                                                mediator   orderbook   websocket
#+END_SRC

** exchange translation schemes
Each exchange has a different websocket API. To translate raw JSON
text received from websocket -> to internal representation, we use
"translation schemes". Current supported exchanges are:
1. Binance
2. Bitfinex
3. Bitflyer
4. BitMEX
5. Bitstamp
6. Bybit
7. Coinbase Pro
8. FTX
9. Gemini
10. HitBTC
11. Kraken
12. Poloniex

** ecto repo and postgres database
The ecto repo provides a means for storing and retrieving persistent
data in level4. It is absolutely not used to store market data
received over the numerous websocket connections. There's only three
main entities, and their schema migrations can be found in
=priv/repo/migrations=:
1. symbol
2. exchange
3. market
A market has two symbols (a base and a quote) and an exchange. There
is no need for an entity relationship diagram here.

** controller
When level4 is started it does not connect to any data feeds
automatically. Level4 is a long-running service that lives in the
cluster i.e. it is not stopped and started often.

*** iex cli
In a development setting it is possible to create and query the repo
via the =queries= package. Market data feeds can be started and stopped
using the functions in =Markets= module.

**** queries
Below functions can be used to create and list the aforementioned
three entities. Please see =lib/queries=.
1. =Query.Symbol.new=
2. =Query.Symbol.all=
3. =Query.Exchange.new=
4. =Query.Exchange.all=
5. =Query.Market.new=
6. =Query.Market.all=

**** start/stop market data feeds
Below functions enable starting and stopping all/individual market
data feeds. Please see =lib/application.ex=.
1. =Markets.start=
2. =Markets.start(:all)=
3. =Markets.stop=
4. =Markets.stop(:all)=

*** http api
To interface with level4 remotely i.e. when deployed in the cluster
we can use the HTTP server which provides an HTTP API on-top of the
functions defined above. See =lib/server= for more details.

**** symbols, exchanges, and markets
1. =POST /symbols=
2. =GET /symbols=
3. =POST /exchanges=
4. =GET /exchanges=
5. =POST /markets=
6. =GET /markets=
7. =GET /markets?enabled=true|false=

**** start/stop market data feeds
1. =PATCH /markets/<id>= with JSON text body
   ={ ... "level4_feed_enabled": true|false, ... }=
